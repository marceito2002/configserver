def source = env.TAG_NAME ? env.TAG_NAME : env.BRANCH_NAME


import com.buongiorno.jenkinsci.plugins.delivery.*;

pipeline {
    agent any

    tools {
        maven 'Maven 3.5.0'
        jdk 'jdk 8u71'     
        oc 'oc3'
    }
                    
    environment{				
		OPENSHIFT_PROJECT = "prueba"
		OPENSHIFT_TOKEN="l7aP8WJIx0nuFHMX2fM-6eVVXXPNsNlSC4MRQ3xGasM"
		OPENSHIFT_ENPOINT="https://okd-milrc1.dodi.io:8443"
		
		artifactID = readMavenPom().getArtifactId()
    	artifactVersion = readMavenPom().getVersion()
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '3', artifactNumToKeepStr: '3'))
    }

    stages {

        stage('Build') {
            steps {                    	   				   
                echo ".Building artifact...Goal: $env.myBuildGoal and $env.myDeployGoal Revision $env.myRev Version: $env.myVersion"                                
                sh 'mvn -B -DskipTests -Ddockerfile.skip=true clean package'               
            }
        }

        stage('Install') {
            steps {         
                echo 'Install artifact....'
                sh 'mvn -B clean install -DskipTests'                 
            }
        }
        
        stage('Test') {
            steps {
                echo 'Install artifact....'
                echo "Goal: $env.myBuildGoal and $env.myDeployGoal Revision $env.myRev Version: $env.myVersion"
                sh 'mvn -B clean install -Ddockerfile.skip=true'                 
            }
        }   
                               
        stage('Deploy nexus') {
            steps {
            	sh "docker images"
            	
                echo 'Deloying artifact....'
                echo "Goal: $env.myBuildGoal and $env.myDeployGoal Revision $env.myRev Version: $env.myVersion"
//                sh 'mvn deploy -DskipTests -Ddockerfile.username=$DOCKER_USER -Ddockerfile.password=$DOCKER_PASS'                 
            }                        
        }                  

        stage('Deploy Openshift') {
                
            steps {            	
                echo 'Deloying in openshift....'
                 
                sh "oc login ${OPENSHIFT_ENPOINT} --token=${OPENSHIFT_TOKEN}"                
                sh "oc project $OPENSHIFT_PROJECT"
                                
                sh "oc new-app aherreros/microservicesdocomo:${artifactID}-${artifactVersion} --name ${artifactID}"                                                          
            }          
        }                  

        stage('configuration environment Openshift') {
            steps {
            	script {
					try{
		           		sh "oc set env dc/${artifactID} GIT_URI=https://github.com/marceito2002/configServerPruebas.git"
					}
					catch(all){
		     			echo "REVIENTA 2"
					}
					finally{
		     			echo "OK EL 1"
					}
				}		     
				sh "oc set env dc/${artifactID} GIT_PASS="
				sh "oc set env dc/${artifactID} GIT_USER="
				sh "oc set env dc/${artifactID}  SPRING_PROFILES_ACTIVE=openshift"
				script {			
					try { 
						sh "oc expose svc/${artifactID}"			
		        	} catch (all) {
		            	echo "REVIENTA"
		            	sh "oc import-image ${artifactID}:${artifactID}-${artifactVersion} --from aherreros/microservicesdocomo:${artifactID}-${artifactVersion}T"
		        	}
	        	} 			                 
            }          
        }  
        

    }
    post {
        always {
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
            }
        }
    }
}